import numpy as np
import sys
sys. setrecursionlimit(2048)

class LongestCommonSubsequence:
    def __init__(self):
        pass
    
    def lcs(self, v: str, w: str):
        """
            Find the longest common subsequence of the two input strings.
        """
        # DP & backtrack
        backtrack = self.lcs_backtrack(v, w)
        
        # Use the backtrack to output the lcs
        output = self.output_lcs(backtrack, v, backtrack.shape[0] - 1, backtrack.shape[1] - 1)
        
        return output
    
    def lcs_backtrack(self, v: str, w: str):
        
        n, m = len(v), len(w)
        
        # Maintain an array for recording subsequence length
        # and another for backtrack direction
        s, backtrack  = np.zeros((n + 1, m + 1)), np.zeros((n + 1, m + 1))
        
        # Initializes the array for subsequence length
        s[:, 0] = 0
        s[0, :] = 0
        
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                
                # Match or not
                match_ = int(v[i - 1] == w[j - 1])
                
                # Update the subsequence length
                s[i, j] = max(s[i - 1, j], s[i, j - 1], s[i - 1, j - 1] + match_)
                
                # Update the backtrack direction
                if s[i, j] == s[i - 1, j]: # horizontal
                    backtrack[i, j] = 1
                elif s[i, j] == s[i, j - 1]: # vertical
                    backtrack[i, j] = 2
                elif s[i, j] == s[i - 1, j - 1] + match_: # diagonal
                    backtrack[i, j] = 3
                    
        return backtrack
    
    def output_lcs(self, backtrack, v, i, j):
        """
            Recursively output the LCS based on an backtrack array.
        """
        if i == 0 or j == 0:
            return ""
        if backtrack[i, j] == 1: # horizontal
           return self.output_lcs(backtrack, v, i - 1, j)
        elif backtrack[i, j] == 2: # vertical
            return self.output_lcs(backtrack, v, i, j - 1)
        else: # diagonal
            return self.output_lcs(backtrack, v, i - 1, j - 1) + v[i - 1]
        
        
    def test(self):
        v = 'ACCGTCTTAGCGATCAACACATTTAACAACGCGCCGCACCCCCCGTCAAACGAGCTTTTGGGCTCTTGTCCTTTTACAAGCTTCACGACGCATACAGCCTTGATCAACGGTTTGATCTGTCTCCCTTCAGCTGGCTTTAAAGGACATACATATGAAGGCCTTAATAAGGTCCGGGAACTCCACATATTCGGTACTGGGCAAACCCCATGAACCACCTCAACATGAAGAGTCCGAGGACTCTCACGATCCACCAATGCAGATCGGAACTGTGCGATCGCGTAATGAGCCGAGTACTTGGTTTGTGTTTAGGTTATGGGGGCCGGGAGCCGGTTCAATATAAGGAAGTAGTTGCAGATTAGTTGTTGCGAACGGTCATAAATTTGATGGGTAAACGTGAACTTAACAAACCGTGATAGCTAATCCTATGCATCCCTTACGTGGATCGACTCGAGTACCCAGGTGAACCGACTACTTGATAACCGGAAATCGCGGTATAAAAGCGCTCACGGTCAGGAGATATACCTCCAAGCAGTAGTCTTTCTGAGCCTAGAGTAGTAAATTACAGGGACGATGTCTTTTACCGAGGCAACATTTTATTGAGAATCACATGAGGCACAGGTAAAGGCGACATCACGATCGAGATCAACCCCTACTTGTTCAAAACATTGAGAACCAGCTCTGTTTTGGAACCTAGAAAGATAACGCATCCGCTTGATATTCCACGGCTTGTCCCTCTTGTGCGGTCCATCTATCGGAGTTTCCTCCGATACGACCCGCAATGTTTCCAGGCGTACGGTACTTTATGAATACACTCGCGCTGTAACCTGTTATGTGAAACACACACGACAGAGCTTCGCGTGGGCCCAGCGACCCGGTAATACTACATCACCGCACACGACCTCGAGCAGTCTTTGCCGGCGTCCGTAAGTAGTCTAAAGTTGTGTTGATGCTTGGGGTTAAAGCTAAATCGTCCGCAGAATACGACTCTCATCCCAAT'
        w = 'ACCCGCACGCGCTTTGGTCTAGATTCTAGCTCCAACTTGCCTGCTAGATACTCTGTTAAAAGATGGTTTTACAACCCCCTCCTCTGTCCCTGGGGTATTATATAATACGTCGGATAGTCAGGTACAAATACAAGTGGGTGGGAATACTTTTCCTCGGATCCTAGACCACGGATTACTGCGTGGTTGACAAGAGTCGGCCCGGAGGGAAACGTGAAGGTTAGTGCAATTAAAGTCTCTAATGTGAAGCCTCCGCGAAGCGAGGAGTTTCTGAGATCGAGTACTATTTAGAGTTCGAAATCACGGCTTAACCTCACTGCCACGCATAACTTGCCGGCAATCCAGTTTTGCAACGATACTTAATTTGTGCAGCTCATCTTTGCTGTCCAGAAATAGAGCTAGTCGATCTCATCTTGCGGGTAGCCAGAAGTCCTACCGTCTCCTCCATGTAGCTTAAAAATTTCGGTGAGGATCAAAAATGATAAACGTGACAGGTAAGCTCCTACGTCTATCCTATGACCCCCGCGGCAGAATAGGTTGGTAGTGTTAGTGCGTGAGCTGGTAGAATAGAGCACACTTAGGGAAACGGGAACCGTTATGTAGGGCTGCGACACACAAAAAAGTGTTCGTTGGTAAGCTGCCTCTCCACTAAACAGGATTTCTCTGGATGATCCCATCGAAGCAAGTTACGCACCACGCCGAGGCGGACCCTGGTACTAGCTGCCCCCCCCTTTATGGGGCGCTCGTACATCAAGATGATCGCGGACTCAACCTGATTACGAGTTGTCCAAGTAGTCCAGGGTAAGAGAAACTGGAGAGA'
        
        backtrack = self.lcs_backtrack(v, w)
        # print(backtrack, backtrack.shape)
        
        output = self.output_lcs(backtrack, v, len(v), len(w))
        assert output == 'ACCGCAGCGTCAATTTACAACGCCGCACCGTAAAGATGGTTTTACAACCCCCTCCCTGTCCGGTTTATTTCTCTAGTCAGGACAAATAAAGTGGTGGGAATACTTTCTCGGACCAGACCACTACTGGTGGTTGACAAGAGTCGGCCCGGAGGGAACTGGTTGTGTTAGTTATGGGCCCCGGAAGGAGAGTTGAGATCGAGTCTATTTGAGTCGAATCACGGCTAACCTATGCACCTACTTGCCGATCCAGTGAACGATACTTATACCATCGCGTAAAAAGGCTAGTCGATATCCTCCAGAGTAGTCTTCTGAGCTAAAAATTCGGGAGATCAAAAATATAAACTGACAGGTAAGCCTACGTCATCAACCCCCGCAAAATTGGAGTGTTTTGGCTAGAAAGAGCACCTTGAAACGGGCCTTTGTGGGTCCACACAGTTTCTGTAAGCTGTTCCACTACGGTCTTATGATCATCGGCAAGTTAGCACCACGCGAGGCGGACCCGGTACTACTCCCCCACGCTCGACATCTTGCGGCTCCTGATTAAGTTGTGTGTCGGGTAAAGAAACTGAGAGA'